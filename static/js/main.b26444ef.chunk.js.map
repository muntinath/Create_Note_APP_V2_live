{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Form.jsx","components/Note.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","date","Date","getFullYear","Form","props","useState","title","content","note","setNote","handleChange","e","target","name","value","prevNote","onChange","placeholder","rows","onClick","event","onAdd","preventDefault","Note","Button","style","color","width","onDelete","id","App","notes","setNotes","deleteNode","prevNotes","filter","noteItem","index","newNote","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAQeA,MANf,WACA,OACA,wBAAIC,UAAU,UAAd,UCFe,SAASC,IAEpB,IAAIC,GAAK,IAAIC,MAAOC,cAEpB,OACI,yBAAKJ,UAAU,UAAf,gBACeE,G,qCCHR,SAASG,EAAKC,GAAQ,IAAD,EACXC,mBAAS,CAACC,MAAM,GAAGC,QAAQ,KADhB,mBACzBC,EADyB,KACpBC,EADoB,KAEhC,SAASC,EAAaC,GAAG,IAAD,EACDA,EAAEC,OAAdC,EADa,EACbA,KAAKC,EADQ,EACRA,MACZL,GAAQ,SAAAM,GACJ,OAAO,2BAAIA,GAAX,kBAAqBF,EAAMC,OAUnC,OACI,yBAAKhB,UAAU,QACX,8BACQ,2BAAOkB,SAAUN,EAAcG,KAAK,QAAQI,YAAY,gBAAgBH,MAAON,EAAKF,QAAS,6BAC7F,8BAAUU,SAAUN,EAAcG,KAAK,UAAUI,YAAY,mBAAmBH,MAAON,EAAKD,QAAUW,KAAK,MAAM,6BACjH,4BAAQC,QAXpB,SAAsBC,GAClBhB,EAAMiB,MAAMb,GACZC,EAAQ,CAACH,MAAM,GAAGC,QAAQ,KAC1Ba,EAAME,mBAQkC,kBAAC,IAAD,S,6BCrBrC,SAASC,EAAKnB,GAMzB,OACI,yBAAKN,UAAU,QACX,wBAAIA,UAAU,cAAcM,EAAME,OAClC,uBAAGR,UAAU,gBAAiBM,EAAMG,SACpC,kBAACiB,EAAA,EAAD,CAASC,MAAO,CAAEC,MAAM,MAAQC,MAAM,QAAWR,QAR7D,WACIf,EAAMwB,SAASxB,EAAMyB,KAO0D/B,UAAU,WAAU,kBAAC,IAAD,CAAY2B,MAAO,CAAEC,MAAM,WCuBnHI,MA3Bf,WAAgB,IAAD,EACSzB,mBAAS,IADlB,mBACR0B,EADQ,KACFC,EADE,KAQf,SAASC,EAAWJ,GAClBG,GAAS,SAAAE,GACR,OAAOA,EAAUC,QAAO,SAACC,EAASC,GAC/B,OAAOA,IAASR,QAIpB,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,MACA,kBAACK,EAAD,CAAMkB,MAhBZ,SAAiBiB,GACjBN,GAAS,SAAAE,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAqBI,UAehBP,EAAMQ,KAAI,SAACH,EAASC,GACnB,OAAO,kBAACd,EAAD,CAAMiB,IAAKH,EAAQR,GAAIQ,EAAO/B,MAAO8B,EAAS9B,MAAOC,QAAS6B,EAAS7B,QAASqB,SAAUK,OAEnG,kBAAClC,EAAD,QCpBc0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b26444ef.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header(){\r\nreturn (\r\n<h1 className=\"header\">Notes</h1>\r\n)\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nexport default function Footer() {\r\n\r\n    var date=new Date().getFullYear()\r\n\r\n    return (\r\n        <div className=\"footer\">\r\n            copyrightÂ©{date}\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState} from 'react'\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\n\r\n\r\nexport default function Form(props) {\r\n    const [note,setNote]=useState({title:\"\",content:\"\"})\r\n    function handleChange(e){\r\n        const {name,value}=e.target\r\n        setNote(prevNote=>{\r\n            return {...prevNote,[name]:value}\r\n        })\r\n        }\r\n\r\n        function handleSubmit(event){\r\n            props.onAdd(note)\r\n            setNote({title:\"\",content:\"\"})\r\n            event.preventDefault()\r\n        }\r\n\r\n    return (\r\n        <div className=\"form\">\r\n            <form>\r\n                    <input onChange={handleChange} name=\"title\" placeholder=\"Enter a title\" value={note.title} /><br />\r\n                    <textarea onChange={handleChange} name=\"content\" placeholder=\"Enter your notes\" value={note.content}  rows=\"3\" /><br/>\r\n                    <button onClick={handleSubmit} ><AddIcon /></button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Button } from '@material-ui/core'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport default function Note(props) {\r\n\r\nfunction handleClick(){\r\n    props.onDelete(props.id)\r\n}\r\n\r\n    return (\r\n        <div className=\"note\">\r\n            <h3 className=\"note_title\">{props.title}</h3>\r\n            <p className=\"note_content\" >{props.content}</p>\r\n            <Button  style={{ color:\"red\" , width:\"1rem\"  }} onClick={handleClick} className=\"noteBtn\"><DeleteIcon style={{ color:\"red\" }} /></Button>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState} from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Form from \"./components/Form\";\nimport Note from \"./components/Note\"\n\n\n\n\nfunction App() {\nconst [notes,setNotes]= useState([])\nfunction addNote(newNote){\nsetNotes(prevNotes=>{\n  return [...prevNotes,newNote]\n})\n}\n\nfunction deleteNode(id){\n  setNotes(prevNotes=>{\n   return prevNotes.filter((noteItem,index)=>{\n      return index !==id;\n    })\n  })\n}\n  return (\n    <div className=\"App\">\n      <Header />\n      <Form onAdd={addNote} />\n      {notes.map((noteItem,index)=>{\n        return <Note key={index}  id={index} title={noteItem.title} content={noteItem.content} onDelete={deleteNode} />\n      })}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}